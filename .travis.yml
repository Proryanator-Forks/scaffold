language: java
jdk:
- openjdk11
branches:
  only:
  # Since we're using conventional commit paradigm, we only want a master merge commit to trigger a build: https://www.conventionalcommits.org/en/v1.0.0-beta.4/
  - master
before_script:
  # Before updating versioning and pushing artifacts, overwrite settings xml with ossrh and gpg credentials
  - echo "<settings><profiles><profile><id>ossrh</id><activation><activeByDefault>true</activeByDefault></activation><properties><gpg.executable>gpg</gpg.executable><gpg.passphrase>$GPG_PASSWORD</gpg.passphrase></properties></profile></profiles><servers><server><id>ossrh</id><username>$OSSRH_USERNAME</username><password>$OSSRH_PASSWORD</password></server></servers></settings>" > $HOME/.m2/settings.xml
script:
  # Find the most recent version via git tags
  - OLD_VERSION=$(npx git-semver-tags | head -n 1)
  # Using conventional commits paradigm, check the merge commit message on master to set up a new version deployment
  - if [ -n "$OLD_VERSION" ]; then
      BUMP_TYPE=$(
        npx
        -p conventional-changelog-angular
        -p conventional-recommended-bump
        conventional-recommended-bump --preset angular
      );
      NEXT_VERSION=$(npx semver -i $BUMP_TYPE ${OLD_VERSION});
    else
      NEXT_VERSION=1.0.0;
    fi
  # Add a message to console with the next version number
  - echo "Versioning artifacts with version $NEXT_VERSION"
  # Configure the signing
  - git config --global user.signingkey 9CDAE6CF322DC1C9
  # Sets the new version for the release and deploys using the maven release profile
  - mvn --settings $HOME/.m2/settings.xml -Prelease -Dtag=scaffold-"${NEXT_VERSION}" versions:set --define newVersion="${NEXT_VERSION}" clean deploy scm:tag
